resources:
  App\Entity\User:
    collectionOperations:
      get:
        access_control: is_granted('ROLE_USER')
        attributes:
            normalization_context: ['profile']
      get_me:
        method: GET
        path: /users/me
        controller: App\Controller\User\GetMe
        attributes:
            normalization_context: ['profile']
      register:
        method: POST
        path: /register
        controller: App\Controller\Security\Register
        swagger_context:
          summary: Register, returning a valid token on success
          parameters:
          - name: user
            in: body
            required: true
            schema:
              type: App\Entity\User
              required:
                - username
                - email
                - plainPassword
              properties:
                username:
                  type: string
                email:
                  type: string
                plainPassword:
                  type: string
          responses:
            200:
              description: "Successful register attempt, returning a new token"
              schema:
                type: object
                properties:
                  token:
                    type: string
      get_favorite_stats:
          method: get
          path: /users/me/stats/favorites
          controller: App\Controller\User\StatsMoviesByGenre
      get_mark_repartition:
          method: get
          path: /users/me/stats/marks
          controller: App\Controller\User\StatsMarkRepatition
      get_follows:
        method: get
        path: /users/follows
        controller: App\Controller\User\GetFollows
      get_followers:
        method: get
        path: /users/followers
        controller: App\Controller\User\GetFollowers
      get_collections:
        method: get
        path: /users/collections
        controller: App\Controller\User\GetCollections
        normalization_context:
          groups: ['collection', 'light_movie']
    itemOperations:
      get:
        access_control: is_granted('ROLE_USER')
      login:
        method: POST
        route_name: api_login_check
        swagger_context:
          summary: Performs a login attempt, returning a valid token on success
          parameters:
          - name: user
            in: body
            required: true
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
          responses:
            200:
              description: "Successful login attempt, returning a new token"
              schema:
                type: object
                properties:
                  token:
                    type: string
  App\Entity\Follow:
    collectionOperations:
      add_followed_user:
        method: post
        path: /users/follow
        controller: App\Controller\User\AddFollowUser
    itemOperations:
      get: ~